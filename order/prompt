Please implement for this Event Storming Model:

{"_type":"BoundedContext","aggregates":[{"aggregateRoot":{"_type":"AggregateRoot","fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"menu","_type":"FieldDescriptor"},{"className":"String","name":"paymentMethod","_type":"FieldDescriptor"},{"className":"String","name":"deliveryStatus","_type":"FieldDescriptor"},{"className":"Address","name":"deliveryAddress","_type":"FieldDescriptor"},{"className":"String","name":"orderDate","_type":"FieldDescriptor"},{"className":"Rating","name":"rating","_type":"FieldDescriptor"}]},"commands":[{"_type":"Command","fieldDescriptors":[{"className":"String","name":"menu","_type":"FieldDescriptor"},{"className":"String","name":"paymentMethod","_type":"FieldDescriptor"},{"className":"Address","name":"deliveryAddress","_type":"FieldDescriptor"}],"name":"PlaceOrder","displayName":"주문하기"},{"_type":"Command","fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"}],"name":"Reorder","displayName":"재주문"},{"_type":"Command","fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"deliveryTime","_type":"FieldDescriptor"}],"name":"SelectDeliveryTime","displayName":"배달 시간 선택"}],"events":[{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"menu","_type":"FieldDescriptor"},{"className":"String","name":"paymentMethod","_type":"FieldDescriptor"},{"className":"Address","name":"deliveryAddress","_type":"FieldDescriptor"},{"className":"String","name":"orderDate","_type":"FieldDescriptor"}],"name":"OrderPlaced","displayName":"주문됨","_type":"Event"},{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"menu","_type":"FieldDescriptor"},{"className":"String","name":"paymentMethod","_type":"FieldDescriptor"},{"className":"Address","name":"deliveryAddress","_type":"FieldDescriptor"},{"className":"String","name":"orderDate","_type":"FieldDescriptor"}],"name":"OrderReordered","displayName":"재주문됨","_type":"Event"},{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"deliveryTime","_type":"FieldDescriptor"}],"name":"TimeSelectedDelivery","displayName":"배달 시간 선택됨","_type":"Event"}],"name":"Order","displayName":"주문","_type":"Aggregate"}],"name":"order","displayName":"주문","policies":[{"fieldDescriptors":[],"name":"ReorderWhenMultipleOrders","displayName":"다중 주문일 때, 재주문","_type":"Policy"}]}


I want to utilize following techniques:

- clean architecture
- spring-boot3
- spring-data-rest
- JPA (must use package jakarta.persistence.* instead of javax.persistence.*)
- H2 DB
- Lombok
- Kafka with spring-cloud-streams library 
- JUnit Test


SELF-CRITICISM: 
 - when you create pom.xml, USE correct parent project to spring boot 3
 - when you create pom.xml, you MUST specify the version: 3.1.3 ONLY for the spring-cloud-streams
 - Please generate start from pom.xml


when you create execution shell (run.sh), please add '--no-transfer-progress' option not to output transfer progress if there's mvn command:

```
mvn [command] --no-transfer-progress
```

